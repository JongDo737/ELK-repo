input {
  beats {
    port => 5000
    host => "0.0.0.0"
    type => "beats"
  }

  s3 {
    access_key_id => "AKIATZ2CREHRMBUC7NOH"
    secret_access_key => "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"
    region => "ap-northeast-2"
    bucket => "alb-accesslogs-bucket-teo"
    prefix => "AWSLogs/261595668962/elasticloadbalancing/ap-northeast-2/"
    type => "elb"
  }
}

filter {
  if [type] == "elb" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:loadbalancer} %{IP:client_ip}:%{NUMBER:client_port:int} (?:%{IP:backend_ip}:%{NUMBER:backend_port:int}|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} (?:%{NUMBER:elb_status_code:int}|-) (?:%{NUMBER:backend_status_code:int}|-) %{NUMBER:received_bytes:int} %{NUMBER:sent_bytes:int} \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion}\" \"%{DATA:user_agent}\"(?: %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol})?" }
    }

    geoip {
      source => "client_ip"
      target => "geoip"
    }

    mutate {convert => ["lat", "float"]}
    mutate {convert => ["lon", "float"]}
    mutate {convert => ["confirmed", "float"]}
    mutate {rename => ["lat", "[location][lat]"]}
    mutate {rename => ["lon", "[location][lon]"]}

    useragent {
      source => "user_agent"
      target => "user_agent_details"
    }

    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
  }
}
